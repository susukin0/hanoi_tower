Towers of Hanoi - Problem Definition

1. Problem Description
----------------------
You are given 3 pegs (rods) and n disks of different sizes.
All disks start stacked on Peg A (peg 1), with the largest disk at the bottom and the smallest at the top.

The goal is to move all disks to Peg C (peg 3), following two rules:
- Only one disk can be moved at a time.
- A larger disk cannot be placed on top of a smaller disk.

2. State Space
--------------
A state describes the positions of all disks.

We represent the state as an array of integers:
    state[1..n] = {peg_number}
where peg_number # {1, 2, 3} (for pegs A, B, C)

Example (n = 3 disks):
    state = {1, 1, 2}
    # Disk 1 is on peg 1 (A)
    # Disk 2 is on peg 1 (A)
    # Disk 3 is on peg 2 (B)

So formally:
    State = { disk1_peg, disk2_peg, ..., diskN_peg }
    disk_i_peg # {1, 2, 3}

3. Initial State
----------------
All disks are on peg 1 (A)

    state = {1, 1, 1, ..., 1}

4. Actions
----------
An action is: "Move top disk from Peg X to Peg Y"

Possible moves:
    (1 # 2), (1 # 3), (2 # 1), (2 # 3), (3 # 1), (3 # 2)

A move is legal if:
- Peg X is non-empty
- The top disk of Peg X is smaller than the top disk of Peg Y (if Peg Y is non-empty)

5. Transition Model
-------------------
Given a current state and a legal action, the result is a new state where:
- The disk is removed from Peg X and added to Peg Y

In terms of state[] array:
- Find the smallest disk on Peg X # disk_k
- Update state[k] = Y

6. Goal State
-------------
All disks are on peg 3 (C)

    state = {3, 3, 3, ..., 3}

7. Path Cost
------------
- Each move has a cost of 1 step
- Path cost is the total number of moves

Minimum number of moves to solve:
    2^n - 1
